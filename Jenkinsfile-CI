pipeline {
    agent { label 'docker' }
    environment {
        AWS_REGION = 'us-east-1'
        ECR_DJANGO_REPO = '992382545251.dkr.ecr.us-east-1.amazonaws.com/gal-alon-app-repo-ga:django-image-latest'
        ECR_NGINX_REPO = '992382545251.dkr.ecr.us-east-1.amazonaws.com/gal-alon-app-repo-ga:nginx-image-latest'
        AWS_CREDENTIALS_ID = 'aws-access-key-jenkins'
        DEPLOY_REPO_URL = 'https://github.com/galkamay/DevOps_Project-argoCD.git'  // New deploy repo
        DEPLOY_REPO_DIR = 'deploy-repo'  // Directory to clone the repo
        IMAGE_VERSION = "${env.BUILD_NUMBER}-${env.BUILD_ID}"  // Versioning with Jenkins build number
    }

    stages {
        stage('Build and Scan Django Image') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: AWS_CREDENTIALS_ID]]) {
                        sh 'aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_DJANGO_REPO'
                        sh 'cp ./Docker-Files/Dockerfile-django ./Status-Page/Dockerfile'
                        sh 'cd ./Status-Page && docker build --platform linux/amd64 -t django-app:$IMAGE_VERSION .'
                        sh 'docker tag django-app:$IMAGE_VERSION $ECR_DJANGO_REPO:$IMAGE_VERSION'
                        sh 'docker push $ECR_DJANGO_REPO:$IMAGE_VERSION'
                        sh 'trivy image --severity HIGH,CRITICAL --cache-dir /var/lib/trivy --timeout 5m $ECR_DJANGO_REPO:$IMAGE_VERSION'
                    }
                }
            }
        }

        stage('Build and Scan Nginx Image') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: AWS_CREDENTIALS_ID]]) {
                        sh 'aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_NGINX_REPO'
                        sh 'cp ./Docker-Files/Dockerfile-nginx ./Status-Page/Dockerfile'
                        sh 'cd ./Status-Page && docker build --platform linux/amd64 -t nginx-app:$IMAGE_VERSION .'
                        sh 'docker tag nginx-app:$IMAGE_VERSION $ECR_NGINX_REPO:$IMAGE_VERSION'
                        sh 'docker push $ECR_NGINX_REPO:$IMAGE_VERSION'
                        sh 'trivy image --severity HIGH,CRITICAL --cache-dir /var/lib/trivy --timeout 5m $ECR_NGINX_REPO:$IMAGE_VERSION'
                    }
                }
            }
        }

        stage('Update Deployment Repo') {
            steps {
                script {
                    sh "git clone $DEPLOY_REPO_URL $DEPLOY_REPO_DIR"
                    dir("$DEPLOY_REPO_DIR") {
                        sh '''
                        for file in *.yaml; do
                            if [ -f "$file" ]; then
                                sed -i "s|image: $ECR_DJANGO_REPO:.*|image: $ECR_DJANGO_REPO:$IMAGE_VERSION|" "$file"
                                sed -i "s|image: $ECR_NGINX_REPO:.*|image: $ECR_NGINX_REPO:$IMAGE_VERSION|" "$file"
                            else
                                echo "No YAML files found in the root directory"
                            fi
                        done
                        '''
                        withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                            sh '''
                            git config --global user.email "your-email@example.com"
                            git config --global user.name "Your Name"
                            git remote set-url origin https://$GITHUB_TOKEN@github.com/galkamay/DevOps_Project-argoCD.git
                            git add .
                            git commit -m "Update image to version $IMAGE_VERSION"
                            git push origin main
                            '''
                        }
                    }
                }
            }
        }

        stage('Remove All Docker Images') {
            steps {
                script {
                    sh '''
                        images=$(docker images -q)
                        if [ -n "$images" ]; then
                            docker rmi -f $images
                        else
                            echo "No images to delete"
                        fi
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                sh '''
                    if [ -d "$DEPLOY_REPO_DIR" ]; then
                        rm -rf $DEPLOY_REPO_DIR
                        echo "Removed cloned repository: $DEPLOY_REPO_DIR"
                    else
                        echo "No repository to remove"
                    fi
                '''
            }
        }
        success {
            echo 'CI pipeline completed successfully!'
        }
        failure {
            echo 'CI pipeline failed.'
        }
    }
}
